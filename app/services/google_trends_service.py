import time
from typing import List, Dict, Any
from pytrends.request import TrendReq
import pandas as pd


class GoogleTrendsService:
    """
    Google Trends„Çµ„Éº„Éì„Çπ
    pytrends„É©„Ç§„Éñ„É©„É™„Çí‰ΩøÁî®„Åó„Å¶„Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆ‰∫∫Ê∞óÂ∫¶„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    """

    def __init__(self):
        try:
            print("üî• GoogleTrendsServiceÂàùÊúüÂåñÈñãÂßã...")
            # Google Trends API ÂàùÊúüÂåñ
            self.pytrends = TrendReq(hl="ja-JP", tz=540)  # Êó•Êú¨Ë™û„ÄÅJST
            print("‚úÖ GoogleTrendsServiceÂàùÊúüÂåñÂÆå‰∫Ü")
        except Exception as e:
            print(f"‚ùå GoogleTrendsServiceÂàùÊúüÂåñÂ§±Êïó: {str(e)}")
            self.pytrends = None

    async def filter_trending_keywords(
        self, keywords: List[str], threshold: int = 50
    ) -> List[str]:
        """
        „Ç≠„Éº„ÉØ„Éº„Éâ„É™„Çπ„Éà„Åã„Çâ‰∫∫Ê∞ó„ÅÆ„ÅÇ„Çã„ÇÇ„ÅÆ„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞

        Args:
            keywords: „ÉÅ„Çß„ÉÉ„ÇØ„Åô„Çã„Ç≠„Éº„ÉØ„Éº„Éâ„É™„Çπ„Éà
            threshold: ‰∫∫Ê∞óÂ∫¶ÈñæÂÄ§ (0-100„ÄÅ„Éá„Éï„Ç©„É´„Éà50)

        Returns:
            „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Åï„Çå„Åü„Ç≠„Éº„ÉØ„Éº„Éâ„É™„Çπ„Éà
        """
        if not self.pytrends or not keywords:
            print("‚ö†Ô∏è GoogleTrendsÂà©Áî®‰∏çÂèØ„ÄÇÂÖ®„Ç≠„Éº„ÉØ„Éº„ÉâËøîÂç¥")
            return keywords

        try:
            print(f"üîç Google Trends„Ç≠„Éº„ÉØ„Éº„Éâ‰∫∫Ê∞óÂ∫¶„ÉÅ„Çß„ÉÉ„ÇØ: {keywords}")

            trending_keywords = []

            # ÂêÑ„Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆ‰∫∫Ê∞óÂ∫¶„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            for keyword in keywords:
                try:
                    # APIÂà∂Èôê„ÇíÈÅø„Åë„Çã„Åü„ÇÅÂ∞ë„ÅóÂæÖÊ©ü
                    time.sleep(1)

                    # ÈÅéÂéª30Êó•Èñì„ÅÆ„Éà„É¨„É≥„ÉâÂèñÂæó
                    self.pytrends.build_payload(
                        [keyword], timeframe="today 1-m", geo=""
                    )

                    # ÊôÇÁ≥ªÂàó„Éá„Éº„ÇøÂèñÂæó
                    interest_over_time = self.pytrends.interest_over_time()

                    if (
                        not interest_over_time.empty
                        and keyword in interest_over_time.columns
                    ):
                        # Âπ≥Âùá‰∫∫Ê∞óÂ∫¶Ë®àÁÆó
                        avg_interest = interest_over_time[keyword].mean()
                        print(f"  üìä {keyword}: ‰∫∫Ê∞óÂ∫¶ {avg_interest:.1f}")

                        # ÈñæÂÄ§‰ª•‰∏ä„Å™„ÇâËøΩÂä†
                        if avg_interest >= threshold:
                            trending_keywords.append(keyword)
                            print(
                                f"  ‚úÖ {keyword}: „Éà„É¨„É≥„Éá„Ç£„É≥„Ç∞Á¢∫Ë™ç ({avg_interest:.1f} >= {threshold})"
                            )
                        else:
                            print(
                                f"  ‚ùå {keyword}: ‰∫∫Ê∞óÂ∫¶‰∏çË∂≥ ({avg_interest:.1f} < {threshold})"
                            )
                    else:
                        print(f"  ‚ö†Ô∏è {keyword}: „Éá„Éº„Çø„Å™„Åó„ÄÅÂÆâÂÖ®„ÅÆ„Åü„ÇÅÂê´„ÇÅ„Çã")
                        trending_keywords.append(keyword)  # „Éá„Éº„Çø„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÂê´„ÇÅ„Çã

                except Exception as e:
                    print(f"  ‚ùå {keyword}„ÅÆ„Éà„É¨„É≥„Éâ„ÉÅ„Çß„ÉÉ„ÇØÂ§±Êïó: {str(e)}")
                    trending_keywords.append(keyword)  # „Ç®„É©„ÉºÊôÇ„ÅØÂê´„ÇÅ„Çã

            if not trending_keywords:
                print("‚ö†Ô∏è „Éà„É¨„É≥„Éá„Ç£„É≥„Ç∞„Ç≠„Éº„ÉØ„Éº„Éâ„Å™„Åó„ÄÇÂÖÉ„ÅÆ„É™„Çπ„ÉàËøîÂç¥")
                return keywords

            print(
                f"üéØ „Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÁµêÊûú: {len(trending_keywords)}/{len(keywords)}ÂÄã„Ç≠„Éº„ÉØ„Éº„ÉâÈÅ∏Êäû"
            )
            print(f"üî• ÈÅ∏Êäû„Åï„Çå„Åü„Ç≠„Éº„ÉØ„Éº„Éâ: {trending_keywords}")

            return trending_keywords

        except Exception as e:
            print(f"‚ùå Google Trends„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Â§±Êïó: {str(e)}")
            print("üîÑ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: ÂÖ®„Ç≠„Éº„ÉØ„Éº„ÉâËøîÂç¥")
            return keywords

    async def get_related_keywords(self, keyword: str, limit: int = 5) -> List[str]:
        """
        Èñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„ÉâÂèñÂæó

        Args:
            keyword: Âü∫Ê∫ñ„Ç≠„Éº„ÉØ„Éº„Éâ
            limit: ÂèñÂæó„Åô„ÇãÈñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„ÉâÊï∞

        Returns:
            Èñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„Éâ„É™„Çπ„Éà
        """
        if not self.pytrends:
            return []

        try:
            print(f"üîç Èñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢: {keyword}")

            self.pytrends.build_payload([keyword], timeframe="today 3-m")

            # Èñ¢ÈÄ£„ÇØ„Ç®„É™ÂèñÂæó
            related_queries = self.pytrends.related_queries()

            if keyword in related_queries and "top" in related_queries[keyword]:
                top_queries = related_queries[keyword]["top"]
                if not top_queries.empty:
                    related_keywords = top_queries["query"].head(limit).tolist()
                    print(f"‚úÖ Èñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„ÉâÂèñÂæó: {related_keywords}")
                    return related_keywords

            print(f"‚ö†Ô∏è {keyword}„ÅÆÈñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„Éâ„Å™„Åó")
            return []

        except Exception as e:
            print(f"‚ùå Èñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„ÉâÂèñÂæóÂ§±Êïó: {str(e)}")
            return []

    async def get_trending_searches(
        self, country: str = "japan", limit: int = 10
    ) -> List[str]:
        """
        ÁèæÂú®„ÅÆ„Éà„É¨„É≥„Éá„Ç£„É≥„Ç∞Ê§úÁ¥¢ÂèñÂæó

        Args:
            country: ÂõΩÂêç (japan, united_states, etc.)
            limit: ÂèñÂæó„Åô„ÇãÊ§úÁ¥¢Ë™ûÊï∞

        Returns:
            „Éà„É¨„É≥„Éá„Ç£„É≥„Ç∞Ê§úÁ¥¢„É™„Çπ„Éà
        """
        if not self.pytrends:
            return []

        try:
            print(f"üöÄ „Éà„É¨„É≥„Éá„Ç£„É≥„Ç∞Ê§úÁ¥¢ÂèñÂæó: {country}")

            trending_searches = self.pytrends.trending_searches(pn=country)

            if not trending_searches.empty:
                trending_list = trending_searches[0].head(limit).tolist()
                print(f"üî• „Éà„É¨„É≥„Éá„Ç£„É≥„Ç∞Ê§úÁ¥¢: {trending_list}")
                return trending_list

            print(f"‚ö†Ô∏è {country}„ÅÆ„Éà„É¨„É≥„Éá„Ç£„É≥„Ç∞Ê§úÁ¥¢„Éá„Éº„Çø„Å™„Åó")
            return []

        except Exception as e:
            print(f"‚ùå „Éà„É¨„É≥„Éá„Ç£„É≥„Ç∞Ê§úÁ¥¢ÂèñÂæóÂ§±Êïó: {str(e)}")
            return []

    async def check_keyword_popularity(
        self, keyword: str, timeframe: str = "today 1-m"
    ) -> Dict[str, Any]:
        """
        Âçò‰∏Ä„Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆË©≥Á¥∞‰∫∫Ê∞óÂ∫¶„ÉÅ„Çß„ÉÉ„ÇØ

        Args:
            keyword: „ÉÅ„Çß„ÉÉ„ÇØ„Åô„Çã„Ç≠„Éº„ÉØ„Éº„Éâ
            timeframe: ÊôÇÈñìÁØÑÂõ≤

        Returns:
            ‰∫∫Ê∞óÂ∫¶ÊÉÖÂ†±ËæûÊõ∏
        """
        if not self.pytrends:
            return {"keyword": keyword, "popularity": 0, "trend": "unknown"}

        try:
            self.pytrends.build_payload([keyword], timeframe=timeframe)

            # ÊôÇÁ≥ªÂàó„Éá„Éº„Çø
            interest_data = self.pytrends.interest_over_time()

            # Âú∞ÂüüÂà•„Éá„Éº„Çø
            regional_data = self.pytrends.interest_by_region()

            result = {
                "keyword": keyword,
                "popularity": 0,
                "trend": "stable",
                "top_regions": [],
                "timeframe": timeframe,
            }

            if not interest_data.empty and keyword in interest_data.columns:
                avg_popularity = interest_data[keyword].mean()
                result["popularity"] = round(avg_popularity, 1)

                # „Éà„É¨„É≥„ÉâÊñπÂêëÂà§ÂÆö
                recent_values = interest_data[keyword].tail(5).values
                if len(recent_values) >= 2:
                    if recent_values[-1] > recent_values[0]:
                        result["trend"] = "rising"
                    elif recent_values[-1] < recent_values[0]:
                        result["trend"] = "falling"

            if not regional_data.empty:
                top_regions = regional_data.nlargest(3, keyword).index.tolist()
                result["top_regions"] = top_regions

            print(f"üìä {keyword}„ÅÆ‰∫∫Ê∞óÂ∫¶ÂàÜÊûê: {result}")
            return result

        except Exception as e:
            print(f"‚ùå {keyword}„ÅÆ‰∫∫Ê∞óÂ∫¶„ÉÅ„Çß„ÉÉ„ÇØÂ§±Êïó: {str(e)}")
            return {"keyword": keyword, "popularity": 0, "trend": "unknown"}
