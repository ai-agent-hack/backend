version: "3.9"

services:
    # FastAPIアプリケーション
    fastapi:
        build: .
        ports:
            - "8000:8000"
        environment:
            - ENVIRONMENT=development
            - DB_USER=postgres
            - DB_PASSWORD=password
            - DB_NAME=fastapi_db
            - DB_HOST=postgres
            - DB_PORT=5432
            # - REDIS_URL=redis://redis:6379  # Redis使用時にコメントを解除
            - SECRET_KEY=your-secret-key-for-development-change-in-production
            # Firebase環境変数
            - FIREBASE_SERVICE_ACCOUNT_JSON=${FIREBASE_SERVICE_ACCOUNT_JSON}
            - GOOGLE_PROJECT_ID=ai-agent-hack
            - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
            # Google Maps APIキー
            - GOOGLE_MAP_API_KEY=${GOOGLE_MAP_API_KEY}
        depends_on:
            postgres:
                condition: service_healthy
            # - redis  # Redis使用時にコメントを解除
        volumes:
            - ./app:/app/app
        env_file:
            - .env
        command: ["/app/run_migrations.sh"]
        networks:
            - fastapi-network
        restart: unless-stopped

    # PostgreSQLデータベース
    postgres:
        image: postgres:15-alpine
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=password
            - POSTGRES_DB=fastapi_db
        ports:
            - "5432:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
        networks:
            - fastapi-network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d fastapi_db"]
            interval: 5s
            timeout: 5s
            retries: 10
            start_period: 30s
        restart: unless-stopped

    # キャッシュ用Redis（コメントアウト - 必要時にコメントを解除）
    # redis:
    #   image: redis:7-alpine
    #   ports:
    #     - "6379:6379"
    #   volumes:
    #     - redis_data:/data
    #   networks:
    #     - fastapi-network

    # データベース管理用Adminer（オプション）
    adminer:
        image: adminer
        ports:
            - "8080:8080"
        depends_on:
            - postgres
        networks:
            - fastapi-network

    # GCP Cloud SQLプロキシ（コメントアウト - GCPデプロイ時にコメントを解除）
    # cloud-sql-proxy:
    #   image: gcr.io/cloudsql-docker/gce-proxy:1.33.2
    #   command: /cloud_sql_proxy -instances=${CLOUD_SQL_CONNECTION_NAME}=tcp:0.0.0.0:5432
    #   ports:
    #     - "5433:5432"
    #   volumes:
    #     - ${GOOGLE_APPLICATION_CREDENTIALS}:/config
    #   environment:
    #     - GOOGLE_APPLICATION_CREDENTIALS=/config
    #   profiles:
    #     - gcp
    #   networks:
    #     - fastapi-network

volumes:
    postgres_data:
    # redis_data:  # Redis使用時にコメントを解除

networks:
    fastapi-network:
        driver: bridge
